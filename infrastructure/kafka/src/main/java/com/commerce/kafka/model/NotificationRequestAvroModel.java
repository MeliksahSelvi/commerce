/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.commerce.kafka.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class NotificationRequestAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8333819942668963146L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NotificationRequestAvroModel\",\"namespace\":\"com.commerce.kafka.model\",\"fields\":[{\"name\":\"customerId\",\"type\":\"long\"},{\"name\":\"orderId\",\"type\":\"long\"},{\"name\":\"message\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"addressPayload\",\"type\":{\"type\":\"record\",\"name\":\"AddressPayload\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"city\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"county\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"neighborhood\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"street\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"postalCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"notificationType\",\"type\":{\"type\":\"enum\",\"name\":\"NotificationType\",\"symbols\":[\"APPROVING\",\"SHIPPING\",\"DELIVERING\",\"CANCELLING\"]}},{\"name\":\"items\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OrderItemPayload\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"orderId\",\"type\":\"long\"},{\"name\":\"productId\",\"type\":\"long\"},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"price\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"totalPrice\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<NotificationRequestAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<NotificationRequestAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<NotificationRequestAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<NotificationRequestAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<NotificationRequestAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this NotificationRequestAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a NotificationRequestAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a NotificationRequestAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static NotificationRequestAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long customerId;
  private long orderId;
  private java.lang.String message;
  private com.commerce.kafka.model.AddressPayload addressPayload;
  private com.commerce.kafka.model.NotificationType notificationType;
  private java.util.List<com.commerce.kafka.model.OrderItemPayload> items;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NotificationRequestAvroModel() {}

  /**
   * All-args constructor.
   * @param customerId The new value for customerId
   * @param orderId The new value for orderId
   * @param message The new value for message
   * @param addressPayload The new value for addressPayload
   * @param notificationType The new value for notificationType
   * @param items The new value for items
   */
  public NotificationRequestAvroModel(java.lang.Long customerId, java.lang.Long orderId, java.lang.String message, com.commerce.kafka.model.AddressPayload addressPayload, com.commerce.kafka.model.NotificationType notificationType, java.util.List<com.commerce.kafka.model.OrderItemPayload> items) {
    this.customerId = customerId;
    this.orderId = orderId;
    this.message = message;
    this.addressPayload = addressPayload;
    this.notificationType = notificationType;
    this.items = items;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customerId;
    case 1: return orderId;
    case 2: return message;
    case 3: return addressPayload;
    case 4: return notificationType;
    case 5: return items;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customerId = (java.lang.Long)value$; break;
    case 1: orderId = (java.lang.Long)value$; break;
    case 2: message = value$ != null ? value$.toString() : null; break;
    case 3: addressPayload = (com.commerce.kafka.model.AddressPayload)value$; break;
    case 4: notificationType = (com.commerce.kafka.model.NotificationType)value$; break;
    case 5: items = (java.util.List<com.commerce.kafka.model.OrderItemPayload>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public long getCustomerId() {
    return customerId;
  }


  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(long value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return The value of the 'orderId' field.
   */
  public long getOrderId() {
    return orderId;
  }


  /**
   * Sets the value of the 'orderId' field.
   * @param value the value to set.
   */
  public void setOrderId(long value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public java.lang.String getMessage() {
    return message;
  }


  /**
   * Sets the value of the 'message' field.
   * @param value the value to set.
   */
  public void setMessage(java.lang.String value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'addressPayload' field.
   * @return The value of the 'addressPayload' field.
   */
  public com.commerce.kafka.model.AddressPayload getAddressPayload() {
    return addressPayload;
  }


  /**
   * Sets the value of the 'addressPayload' field.
   * @param value the value to set.
   */
  public void setAddressPayload(com.commerce.kafka.model.AddressPayload value) {
    this.addressPayload = value;
  }

  /**
   * Gets the value of the 'notificationType' field.
   * @return The value of the 'notificationType' field.
   */
  public com.commerce.kafka.model.NotificationType getNotificationType() {
    return notificationType;
  }


  /**
   * Sets the value of the 'notificationType' field.
   * @param value the value to set.
   */
  public void setNotificationType(com.commerce.kafka.model.NotificationType value) {
    this.notificationType = value;
  }

  /**
   * Gets the value of the 'items' field.
   * @return The value of the 'items' field.
   */
  public java.util.List<com.commerce.kafka.model.OrderItemPayload> getItems() {
    return items;
  }


  /**
   * Sets the value of the 'items' field.
   * @param value the value to set.
   */
  public void setItems(java.util.List<com.commerce.kafka.model.OrderItemPayload> value) {
    this.items = value;
  }

  /**
   * Creates a new NotificationRequestAvroModel RecordBuilder.
   * @return A new NotificationRequestAvroModel RecordBuilder
   */
  public static com.commerce.kafka.model.NotificationRequestAvroModel.Builder newBuilder() {
    return new com.commerce.kafka.model.NotificationRequestAvroModel.Builder();
  }

  /**
   * Creates a new NotificationRequestAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NotificationRequestAvroModel RecordBuilder
   */
  public static com.commerce.kafka.model.NotificationRequestAvroModel.Builder newBuilder(com.commerce.kafka.model.NotificationRequestAvroModel.Builder other) {
    if (other == null) {
      return new com.commerce.kafka.model.NotificationRequestAvroModel.Builder();
    } else {
      return new com.commerce.kafka.model.NotificationRequestAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new NotificationRequestAvroModel RecordBuilder by copying an existing NotificationRequestAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new NotificationRequestAvroModel RecordBuilder
   */
  public static com.commerce.kafka.model.NotificationRequestAvroModel.Builder newBuilder(com.commerce.kafka.model.NotificationRequestAvroModel other) {
    if (other == null) {
      return new com.commerce.kafka.model.NotificationRequestAvroModel.Builder();
    } else {
      return new com.commerce.kafka.model.NotificationRequestAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for NotificationRequestAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NotificationRequestAvroModel>
    implements org.apache.avro.data.RecordBuilder<NotificationRequestAvroModel> {

    private long customerId;
    private long orderId;
    private java.lang.String message;
    private com.commerce.kafka.model.AddressPayload addressPayload;
    private com.commerce.kafka.model.AddressPayload.Builder addressPayloadBuilder;
    private com.commerce.kafka.model.NotificationType notificationType;
    private java.util.List<com.commerce.kafka.model.OrderItemPayload> items;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.commerce.kafka.model.NotificationRequestAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.orderId)) {
        this.orderId = data().deepCopy(fields()[1].schema(), other.orderId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.message)) {
        this.message = data().deepCopy(fields()[2].schema(), other.message);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.addressPayload)) {
        this.addressPayload = data().deepCopy(fields()[3].schema(), other.addressPayload);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasAddressPayloadBuilder()) {
        this.addressPayloadBuilder = com.commerce.kafka.model.AddressPayload.newBuilder(other.getAddressPayloadBuilder());
      }
      if (isValidValue(fields()[4], other.notificationType)) {
        this.notificationType = data().deepCopy(fields()[4].schema(), other.notificationType);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.items)) {
        this.items = data().deepCopy(fields()[5].schema(), other.items);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing NotificationRequestAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.commerce.kafka.model.NotificationRequestAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.orderId)) {
        this.orderId = data().deepCopy(fields()[1].schema(), other.orderId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.message)) {
        this.message = data().deepCopy(fields()[2].schema(), other.message);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.addressPayload)) {
        this.addressPayload = data().deepCopy(fields()[3].schema(), other.addressPayload);
        fieldSetFlags()[3] = true;
      }
      this.addressPayloadBuilder = null;
      if (isValidValue(fields()[4], other.notificationType)) {
        this.notificationType = data().deepCopy(fields()[4].schema(), other.notificationType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.items)) {
        this.items = data().deepCopy(fields()[5].schema(), other.items);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public long getCustomerId() {
      return customerId;
    }


    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public com.commerce.kafka.model.NotificationRequestAvroModel.Builder setCustomerId(long value) {
      validate(fields()[0], value);
      this.customerId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public com.commerce.kafka.model.NotificationRequestAvroModel.Builder clearCustomerId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderId' field.
      * @return The value.
      */
    public long getOrderId() {
      return orderId;
    }


    /**
      * Sets the value of the 'orderId' field.
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public com.commerce.kafka.model.NotificationRequestAvroModel.Builder setOrderId(long value) {
      validate(fields()[1], value);
      this.orderId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'orderId' field.
      * @return This builder.
      */
    public com.commerce.kafka.model.NotificationRequestAvroModel.Builder clearOrderId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public java.lang.String getMessage() {
      return message;
    }


    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public com.commerce.kafka.model.NotificationRequestAvroModel.Builder setMessage(java.lang.String value) {
      validate(fields()[2], value);
      this.message = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public com.commerce.kafka.model.NotificationRequestAvroModel.Builder clearMessage() {
      message = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'addressPayload' field.
      * @return The value.
      */
    public com.commerce.kafka.model.AddressPayload getAddressPayload() {
      return addressPayload;
    }


    /**
      * Sets the value of the 'addressPayload' field.
      * @param value The value of 'addressPayload'.
      * @return This builder.
      */
    public com.commerce.kafka.model.NotificationRequestAvroModel.Builder setAddressPayload(com.commerce.kafka.model.AddressPayload value) {
      validate(fields()[3], value);
      this.addressPayloadBuilder = null;
      this.addressPayload = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'addressPayload' field has been set.
      * @return True if the 'addressPayload' field has been set, false otherwise.
      */
    public boolean hasAddressPayload() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'addressPayload' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.commerce.kafka.model.AddressPayload.Builder getAddressPayloadBuilder() {
      if (addressPayloadBuilder == null) {
        if (hasAddressPayload()) {
          setAddressPayloadBuilder(com.commerce.kafka.model.AddressPayload.newBuilder(addressPayload));
        } else {
          setAddressPayloadBuilder(com.commerce.kafka.model.AddressPayload.newBuilder());
        }
      }
      return addressPayloadBuilder;
    }

    /**
     * Sets the Builder instance for the 'addressPayload' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.commerce.kafka.model.NotificationRequestAvroModel.Builder setAddressPayloadBuilder(com.commerce.kafka.model.AddressPayload.Builder value) {
      clearAddressPayload();
      addressPayloadBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'addressPayload' field has an active Builder instance
     * @return True if the 'addressPayload' field has an active Builder instance
     */
    public boolean hasAddressPayloadBuilder() {
      return addressPayloadBuilder != null;
    }

    /**
      * Clears the value of the 'addressPayload' field.
      * @return This builder.
      */
    public com.commerce.kafka.model.NotificationRequestAvroModel.Builder clearAddressPayload() {
      addressPayload = null;
      addressPayloadBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'notificationType' field.
      * @return The value.
      */
    public com.commerce.kafka.model.NotificationType getNotificationType() {
      return notificationType;
    }


    /**
      * Sets the value of the 'notificationType' field.
      * @param value The value of 'notificationType'.
      * @return This builder.
      */
    public com.commerce.kafka.model.NotificationRequestAvroModel.Builder setNotificationType(com.commerce.kafka.model.NotificationType value) {
      validate(fields()[4], value);
      this.notificationType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'notificationType' field has been set.
      * @return True if the 'notificationType' field has been set, false otherwise.
      */
    public boolean hasNotificationType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'notificationType' field.
      * @return This builder.
      */
    public com.commerce.kafka.model.NotificationRequestAvroModel.Builder clearNotificationType() {
      notificationType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'items' field.
      * @return The value.
      */
    public java.util.List<com.commerce.kafka.model.OrderItemPayload> getItems() {
      return items;
    }


    /**
      * Sets the value of the 'items' field.
      * @param value The value of 'items'.
      * @return This builder.
      */
    public com.commerce.kafka.model.NotificationRequestAvroModel.Builder setItems(java.util.List<com.commerce.kafka.model.OrderItemPayload> value) {
      validate(fields()[5], value);
      this.items = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'items' field has been set.
      * @return True if the 'items' field has been set, false otherwise.
      */
    public boolean hasItems() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'items' field.
      * @return This builder.
      */
    public com.commerce.kafka.model.NotificationRequestAvroModel.Builder clearItems() {
      items = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public NotificationRequestAvroModel build() {
      try {
        NotificationRequestAvroModel record = new NotificationRequestAvroModel();
        record.customerId = fieldSetFlags()[0] ? this.customerId : (java.lang.Long) defaultValue(fields()[0]);
        record.orderId = fieldSetFlags()[1] ? this.orderId : (java.lang.Long) defaultValue(fields()[1]);
        record.message = fieldSetFlags()[2] ? this.message : (java.lang.String) defaultValue(fields()[2]);
        if (addressPayloadBuilder != null) {
          try {
            record.addressPayload = this.addressPayloadBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("addressPayload"));
            throw e;
          }
        } else {
          record.addressPayload = fieldSetFlags()[3] ? this.addressPayload : (com.commerce.kafka.model.AddressPayload) defaultValue(fields()[3]);
        }
        record.notificationType = fieldSetFlags()[4] ? this.notificationType : (com.commerce.kafka.model.NotificationType) defaultValue(fields()[4]);
        record.items = fieldSetFlags()[5] ? this.items : (java.util.List<com.commerce.kafka.model.OrderItemPayload>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<NotificationRequestAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<NotificationRequestAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<NotificationRequestAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<NotificationRequestAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










