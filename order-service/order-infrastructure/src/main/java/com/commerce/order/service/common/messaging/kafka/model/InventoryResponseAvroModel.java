/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.commerce.order.service.common.messaging.kafka.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class InventoryResponseAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9125905043478258349L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InventoryResponseAvroModel\",\"namespace\":\"com.commerce.order.service.common.messaging.kafka.model\",\"fields\":[{\"name\":\"sagaId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"customerId\",\"type\":\"long\"},{\"name\":\"orderId\",\"type\":\"long\"},{\"name\":\"inventoryStatus\",\"type\":{\"type\":\"enum\",\"name\":\"InventoryStatus\",\"symbols\":[\"AVAILABLE\",\"NON_AVAILABLE\"]}},{\"name\":\"orderInventoryStatus\",\"type\":{\"type\":\"enum\",\"name\":\"OrderInventoryStatus\",\"symbols\":[\"CHECKING\",\"CHECKING_ROLLBACK\",\"PROCESSING\",\"PROCESSING_ROLLBACK\"]}},{\"name\":\"failureMessages\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<InventoryResponseAvroModel> ENCODER =
      new BinaryMessageEncoder<InventoryResponseAvroModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<InventoryResponseAvroModel> DECODER =
      new BinaryMessageDecoder<InventoryResponseAvroModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<InventoryResponseAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<InventoryResponseAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<InventoryResponseAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<InventoryResponseAvroModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this InventoryResponseAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a InventoryResponseAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a InventoryResponseAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static InventoryResponseAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String sagaId;
  private long customerId;
  private long orderId;
  private com.commerce.order.service.common.messaging.kafka.model.InventoryStatus inventoryStatus;
  private com.commerce.order.service.common.messaging.kafka.model.OrderInventoryStatus orderInventoryStatus;
  private java.util.List<java.lang.String> failureMessages;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InventoryResponseAvroModel() {}

  /**
   * All-args constructor.
   * @param sagaId The new value for sagaId
   * @param customerId The new value for customerId
   * @param orderId The new value for orderId
   * @param inventoryStatus The new value for inventoryStatus
   * @param orderInventoryStatus The new value for orderInventoryStatus
   * @param failureMessages The new value for failureMessages
   */
  public InventoryResponseAvroModel(java.lang.String sagaId, java.lang.Long customerId, java.lang.Long orderId, com.commerce.order.service.common.messaging.kafka.model.InventoryStatus inventoryStatus, com.commerce.order.service.common.messaging.kafka.model.OrderInventoryStatus orderInventoryStatus, java.util.List<java.lang.String> failureMessages) {
    this.sagaId = sagaId;
    this.customerId = customerId;
    this.orderId = orderId;
    this.inventoryStatus = inventoryStatus;
    this.orderInventoryStatus = orderInventoryStatus;
    this.failureMessages = failureMessages;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sagaId;
    case 1: return customerId;
    case 2: return orderId;
    case 3: return inventoryStatus;
    case 4: return orderInventoryStatus;
    case 5: return failureMessages;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sagaId = value$ != null ? value$.toString() : null; break;
    case 1: customerId = (java.lang.Long)value$; break;
    case 2: orderId = (java.lang.Long)value$; break;
    case 3: inventoryStatus = (com.commerce.order.service.common.messaging.kafka.model.InventoryStatus)value$; break;
    case 4: orderInventoryStatus = (com.commerce.order.service.common.messaging.kafka.model.OrderInventoryStatus)value$; break;
    case 5: failureMessages = (java.util.List<java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'sagaId' field.
   * @return The value of the 'sagaId' field.
   */
  public java.lang.String getSagaId() {
    return sagaId;
  }


  /**
   * Sets the value of the 'sagaId' field.
   * @param value the value to set.
   */
  public void setSagaId(java.lang.String value) {
    this.sagaId = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public long getCustomerId() {
    return customerId;
  }


  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(long value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return The value of the 'orderId' field.
   */
  public long getOrderId() {
    return orderId;
  }


  /**
   * Sets the value of the 'orderId' field.
   * @param value the value to set.
   */
  public void setOrderId(long value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'inventoryStatus' field.
   * @return The value of the 'inventoryStatus' field.
   */
  public com.commerce.order.service.common.messaging.kafka.model.InventoryStatus getInventoryStatus() {
    return inventoryStatus;
  }


  /**
   * Sets the value of the 'inventoryStatus' field.
   * @param value the value to set.
   */
  public void setInventoryStatus(com.commerce.order.service.common.messaging.kafka.model.InventoryStatus value) {
    this.inventoryStatus = value;
  }

  /**
   * Gets the value of the 'orderInventoryStatus' field.
   * @return The value of the 'orderInventoryStatus' field.
   */
  public com.commerce.order.service.common.messaging.kafka.model.OrderInventoryStatus getOrderInventoryStatus() {
    return orderInventoryStatus;
  }


  /**
   * Sets the value of the 'orderInventoryStatus' field.
   * @param value the value to set.
   */
  public void setOrderInventoryStatus(com.commerce.order.service.common.messaging.kafka.model.OrderInventoryStatus value) {
    this.orderInventoryStatus = value;
  }

  /**
   * Gets the value of the 'failureMessages' field.
   * @return The value of the 'failureMessages' field.
   */
  public java.util.List<java.lang.String> getFailureMessages() {
    return failureMessages;
  }


  /**
   * Sets the value of the 'failureMessages' field.
   * @param value the value to set.
   */
  public void setFailureMessages(java.util.List<java.lang.String> value) {
    this.failureMessages = value;
  }

  /**
   * Creates a new InventoryResponseAvroModel RecordBuilder.
   * @return A new InventoryResponseAvroModel RecordBuilder
   */
  public static com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder newBuilder() {
    return new com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder();
  }

  /**
   * Creates a new InventoryResponseAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InventoryResponseAvroModel RecordBuilder
   */
  public static com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder newBuilder(com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder other) {
    if (other == null) {
      return new com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder();
    } else {
      return new com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new InventoryResponseAvroModel RecordBuilder by copying an existing InventoryResponseAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new InventoryResponseAvroModel RecordBuilder
   */
  public static com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder newBuilder(com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel other) {
    if (other == null) {
      return new com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder();
    } else {
      return new com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for InventoryResponseAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InventoryResponseAvroModel>
    implements org.apache.avro.data.RecordBuilder<InventoryResponseAvroModel> {

    private java.lang.String sagaId;
    private long customerId;
    private long orderId;
    private com.commerce.order.service.common.messaging.kafka.model.InventoryStatus inventoryStatus;
    private com.commerce.order.service.common.messaging.kafka.model.OrderInventoryStatus orderInventoryStatus;
    private java.util.List<java.lang.String> failureMessages;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sagaId)) {
        this.sagaId = data().deepCopy(fields()[0].schema(), other.sagaId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.orderId)) {
        this.orderId = data().deepCopy(fields()[2].schema(), other.orderId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.inventoryStatus)) {
        this.inventoryStatus = data().deepCopy(fields()[3].schema(), other.inventoryStatus);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.orderInventoryStatus)) {
        this.orderInventoryStatus = data().deepCopy(fields()[4].schema(), other.orderInventoryStatus);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.failureMessages)) {
        this.failureMessages = data().deepCopy(fields()[5].schema(), other.failureMessages);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing InventoryResponseAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.sagaId)) {
        this.sagaId = data().deepCopy(fields()[0].schema(), other.sagaId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.orderId)) {
        this.orderId = data().deepCopy(fields()[2].schema(), other.orderId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.inventoryStatus)) {
        this.inventoryStatus = data().deepCopy(fields()[3].schema(), other.inventoryStatus);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.orderInventoryStatus)) {
        this.orderInventoryStatus = data().deepCopy(fields()[4].schema(), other.orderInventoryStatus);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.failureMessages)) {
        this.failureMessages = data().deepCopy(fields()[5].schema(), other.failureMessages);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'sagaId' field.
      * @return The value.
      */
    public java.lang.String getSagaId() {
      return sagaId;
    }


    /**
      * Sets the value of the 'sagaId' field.
      * @param value The value of 'sagaId'.
      * @return This builder.
      */
    public com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder setSagaId(java.lang.String value) {
      validate(fields()[0], value);
      this.sagaId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sagaId' field has been set.
      * @return True if the 'sagaId' field has been set, false otherwise.
      */
    public boolean hasSagaId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sagaId' field.
      * @return This builder.
      */
    public com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder clearSagaId() {
      sagaId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public long getCustomerId() {
      return customerId;
    }


    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder setCustomerId(long value) {
      validate(fields()[1], value);
      this.customerId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder clearCustomerId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderId' field.
      * @return The value.
      */
    public long getOrderId() {
      return orderId;
    }


    /**
      * Sets the value of the 'orderId' field.
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder setOrderId(long value) {
      validate(fields()[2], value);
      this.orderId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'orderId' field.
      * @return This builder.
      */
    public com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder clearOrderId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'inventoryStatus' field.
      * @return The value.
      */
    public com.commerce.order.service.common.messaging.kafka.model.InventoryStatus getInventoryStatus() {
      return inventoryStatus;
    }


    /**
      * Sets the value of the 'inventoryStatus' field.
      * @param value The value of 'inventoryStatus'.
      * @return This builder.
      */
    public com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder setInventoryStatus(com.commerce.order.service.common.messaging.kafka.model.InventoryStatus value) {
      validate(fields()[3], value);
      this.inventoryStatus = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'inventoryStatus' field has been set.
      * @return True if the 'inventoryStatus' field has been set, false otherwise.
      */
    public boolean hasInventoryStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'inventoryStatus' field.
      * @return This builder.
      */
    public com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder clearInventoryStatus() {
      inventoryStatus = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderInventoryStatus' field.
      * @return The value.
      */
    public com.commerce.order.service.common.messaging.kafka.model.OrderInventoryStatus getOrderInventoryStatus() {
      return orderInventoryStatus;
    }


    /**
      * Sets the value of the 'orderInventoryStatus' field.
      * @param value The value of 'orderInventoryStatus'.
      * @return This builder.
      */
    public com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder setOrderInventoryStatus(com.commerce.order.service.common.messaging.kafka.model.OrderInventoryStatus value) {
      validate(fields()[4], value);
      this.orderInventoryStatus = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'orderInventoryStatus' field has been set.
      * @return True if the 'orderInventoryStatus' field has been set, false otherwise.
      */
    public boolean hasOrderInventoryStatus() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'orderInventoryStatus' field.
      * @return This builder.
      */
    public com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder clearOrderInventoryStatus() {
      orderInventoryStatus = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'failureMessages' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getFailureMessages() {
      return failureMessages;
    }


    /**
      * Sets the value of the 'failureMessages' field.
      * @param value The value of 'failureMessages'.
      * @return This builder.
      */
    public com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder setFailureMessages(java.util.List<java.lang.String> value) {
      validate(fields()[5], value);
      this.failureMessages = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'failureMessages' field has been set.
      * @return True if the 'failureMessages' field has been set, false otherwise.
      */
    public boolean hasFailureMessages() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'failureMessages' field.
      * @return This builder.
      */
    public com.commerce.order.service.common.messaging.kafka.model.InventoryResponseAvroModel.Builder clearFailureMessages() {
      failureMessages = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public InventoryResponseAvroModel build() {
      try {
        InventoryResponseAvroModel record = new InventoryResponseAvroModel();
        record.sagaId = fieldSetFlags()[0] ? this.sagaId : (java.lang.String) defaultValue(fields()[0]);
        record.customerId = fieldSetFlags()[1] ? this.customerId : (java.lang.Long) defaultValue(fields()[1]);
        record.orderId = fieldSetFlags()[2] ? this.orderId : (java.lang.Long) defaultValue(fields()[2]);
        record.inventoryStatus = fieldSetFlags()[3] ? this.inventoryStatus : (com.commerce.order.service.common.messaging.kafka.model.InventoryStatus) defaultValue(fields()[3]);
        record.orderInventoryStatus = fieldSetFlags()[4] ? this.orderInventoryStatus : (com.commerce.order.service.common.messaging.kafka.model.OrderInventoryStatus) defaultValue(fields()[4]);
        record.failureMessages = fieldSetFlags()[5] ? this.failureMessages : (java.util.List<java.lang.String>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<InventoryResponseAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<InventoryResponseAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<InventoryResponseAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<InventoryResponseAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.sagaId);

    out.writeLong(this.customerId);

    out.writeLong(this.orderId);

    out.writeEnum(this.inventoryStatus.ordinal());

    out.writeEnum(this.orderInventoryStatus.ordinal());

    long size0 = this.failureMessages.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.String e0: this.failureMessages) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.sagaId = in.readString();

      this.customerId = in.readLong();

      this.orderId = in.readLong();

      this.inventoryStatus = com.commerce.order.service.common.messaging.kafka.model.InventoryStatus.values()[in.readEnum()];

      this.orderInventoryStatus = com.commerce.order.service.common.messaging.kafka.model.OrderInventoryStatus.values()[in.readEnum()];

      long size0 = in.readArrayStart();
      java.util.List<java.lang.String> a0 = this.failureMessages;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("failureMessages").schema());
        this.failureMessages = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString();
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.sagaId = in.readString();
          break;

        case 1:
          this.customerId = in.readLong();
          break;

        case 2:
          this.orderId = in.readLong();
          break;

        case 3:
          this.inventoryStatus = com.commerce.order.service.common.messaging.kafka.model.InventoryStatus.values()[in.readEnum()];
          break;

        case 4:
          this.orderInventoryStatus = com.commerce.order.service.common.messaging.kafka.model.OrderInventoryStatus.values()[in.readEnum()];
          break;

        case 5:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.String> a0 = this.failureMessages;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("failureMessages").schema());
            this.failureMessages = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString();
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










